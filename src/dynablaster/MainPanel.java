package dynablaster;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JPanel;
import javax.swing.Timer;

public class MainPanel extends JPanel {

    private final Image gracz;
    private final Image indestructible;
    private int x;
    private int y;
    private final Timer moveTimer;
    private int xDelta;
    private int yDelta;

    public MainPanel() {
        initComponents();

        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        gracz = toolkit.getImage("gracz.png");
        indestructible = toolkit.getImage("indestructible.png");

        KeyListenerWrapper listener = KeyListenerWrapper.init(new KeyAdapter() {
            private int latestKeyPressedCode;

            @Override
            public void keyPressed(KeyEvent e) {
                latestKeyPressedCode = e.getKeyCode();
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        xDelta = 0;
                        yDelta = -2;
                        break;
                    case KeyEvent.VK_DOWN:
                        xDelta = 0;
                        yDelta = 2;
                        break;
                    case KeyEvent.VK_LEFT:
                        xDelta = -2;
                        yDelta = 0;
                        break;
                    case KeyEvent.VK_RIGHT:
                        xDelta = 2;
                        yDelta = 0;
                        break;
                    default:
                        break;
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                    case KeyEvent.VK_DOWN:
                    case KeyEvent.VK_LEFT:
                    case KeyEvent.VK_RIGHT:
                        if (latestKeyPressedCode == e.getKeyCode()) {
                            xDelta = 0;
                            yDelta = 0;
                        }
                        break;
                    default:
                        break;
                }
            }

        }, false);

        addKeyListener(listener);

        moveTimer = new Timer(17, (ActionEvent) -> {
            int xTile = x / 16;
            int yTile = y / 16;

            if (xDelta != 0) {
                if (y % 16 != 0) {
                    if (yTile % 2 == 0) {
                        y -= 1;
                    } else {
                        y += 1;
                    }
                } else if (yTile % 2 == 0) {
                    x += xDelta;
                }
            } else if (yDelta != 0) {
                if (x % 16 != 0) {
                    if (xTile % 2 == 0) {
                        x -= 1;
                    } else {
                        x += 1;
                    }
                } else if (xTile % 2 == 0) {
                    y += yDelta;
                }
            }

            if (y < 0) {
                y = 0;
            } else if (y > 160) {
                y = 160;
            }

            if (x < 0) {
                x = 0;
            } else if (x > 160) {
                x = 160;
            }

            repaint();
        });
        moveTimer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(208, 208));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g;
        g2.setColor(Color.GREEN);
        g2.fillRect(0, 0, 23 * 10, 23 * 10);

        for (int x = 0; x < 13; x++) {
            for (int y = 0; y < 13; y++) {
                if (x == 0 || y == 0 || x == 12 || y == 12 || x % 2 == 0 && y % 2 == 0) {
                    g2.drawImage(indestructible, x * 16, y * 16, this);
                }
            }
        }

        g2.drawImage(gracz, x + 13, y + 7, this);

        Toolkit.getDefaultToolkit().sync();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
